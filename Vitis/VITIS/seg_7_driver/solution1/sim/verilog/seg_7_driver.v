// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="seg_7_driver_seg_7_driver,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=6.088000,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=17,HLS_SYN_LUT=99,HLS_VERSION=2022_2}" *)

module seg_7_driver (
        ap_clk,
        ap_rst,
        refresh_signal,
        digit1,
        digit2,
        seg_7_data,
        seg_7_enable
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   refresh_signal;
input  [3:0] digit1;
input  [3:0] digit2;
output  [7:0] seg_7_data;
output  [3:0] seg_7_enable;

reg   [1:0] state;
wire   [3:0] seg_7_code_V_address0;
reg    seg_7_code_V_ce0;
wire   [7:0] seg_7_code_V_q0;
wire   [0:0] icmp_ln34_fu_113_p2;
reg   [0:0] icmp_ln34_reg_319;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln34_1_fu_119_p2;
reg   [0:0] icmp_ln34_1_reg_324;
wire   [0:0] icmp_ln34_2_fu_125_p2;
reg   [0:0] icmp_ln34_2_reg_329;
wire   [0:0] and_ln11_fu_131_p2;
reg   [0:0] and_ln11_reg_336;
wire   [0:0] and_ln11_1_fu_143_p2;
reg   [0:0] and_ln11_1_reg_341;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln11_fu_185_p1;
wire    ap_block_pp0_stage0;
wire   [1:0] next_state_fu_260_p3;
wire    ap_block_pp0_stage0_01001;
wire   [0:0] and_ln11_fu_131_p1;
wire   [0:0] xor_ln11_fu_137_p0;
wire   [0:0] xor_ln11_fu_137_p2;
wire   [0:0] and_ln11_3_fu_155_p1;
wire   [0:0] and_ln11_3_fu_155_p2;
wire   [3:0] select_ln11_fu_161_p3;
wire   [3:0] select_ln11_1_fu_169_p3;
wire   [3:0] select_ln11_2_fu_177_p3;
wire   [0:0] and_ln11_2_fu_149_p2;
wire   [0:0] and_ln11_4_fu_202_p1;
wire   [0:0] and_ln11_5_fu_208_p2;
wire   [0:0] and_ln11_4_fu_202_p2;
wire   [0:0] or_ln11_3_fu_196_p2;
wire   [0:0] or_ln11_2_fu_190_p2;
wire   [0:0] select_ln11_5_fu_238_p0;
wire   [0:0] or_ln11_4_fu_222_p2;
wire   [1:0] select_ln11_4_fu_214_p3;
wire   [1:0] zext_ln11_1_fu_228_p1;
wire   [0:0] or_ln11_5_fu_232_p2;
wire   [0:0] or_ln11_6_fu_254_p2;
wire   [1:0] select_ln11_6_fu_246_p3;
wire   [1:0] select_ln11_5_fu_238_p3;
wire   [0:0] or_ln34_fu_281_p2;
wire   [3:0] select_ln34_fu_274_p3;
wire   [3:0] select_ln34_1_fu_285_p3;
wire   [0:0] or_ln11_fu_301_p2;
wire   [0:0] or_ln11_1_fu_305_p2;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 state = 2'd0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

seg_7_driver_seg_7_code_V_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
seg_7_code_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(seg_7_code_V_address0),
    .ce0(seg_7_code_V_ce0),
    .q0(seg_7_code_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln11_1_reg_341 <= and_ln11_1_fu_143_p2;
        and_ln11_reg_336 <= and_ln11_fu_131_p2;
        icmp_ln34_1_reg_324 <= icmp_ln34_1_fu_119_p2;
        icmp_ln34_2_reg_329 <= icmp_ln34_2_fu_125_p2;
        icmp_ln34_reg_319 <= icmp_ln34_fu_113_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        state <= next_state_fu_260_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        seg_7_code_V_ce0 = 1'b1;
    end else begin
        seg_7_code_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln11_1_fu_143_p2 = (xor_ln11_fu_137_p2 & icmp_ln34_1_fu_119_p2);

assign and_ln11_2_fu_149_p2 = (xor_ln11_fu_137_p2 & icmp_ln34_2_fu_125_p2);

assign and_ln11_3_fu_155_p1 = refresh_signal;

assign and_ln11_3_fu_155_p2 = (icmp_ln34_2_fu_125_p2 & and_ln11_3_fu_155_p1);

assign and_ln11_4_fu_202_p1 = refresh_signal;

assign and_ln11_4_fu_202_p2 = (icmp_ln34_1_fu_119_p2 & and_ln11_4_fu_202_p1);

assign and_ln11_5_fu_208_p2 = (xor_ln11_fu_137_p2 & icmp_ln34_fu_113_p2);

assign and_ln11_fu_131_p1 = refresh_signal;

assign and_ln11_fu_131_p2 = (icmp_ln34_fu_113_p2 & and_ln11_fu_131_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign icmp_ln34_1_fu_119_p2 = ((state == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln34_2_fu_125_p2 = ((state == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_113_p2 = ((state == 2'd3) ? 1'b1 : 1'b0);

assign next_state_fu_260_p3 = ((or_ln11_6_fu_254_p2[0:0] == 1'b1) ? select_ln11_6_fu_246_p3 : select_ln11_5_fu_238_p3);

assign or_ln11_1_fu_305_p2 = (or_ln11_fu_301_p2 | icmp_ln34_2_reg_329);

assign or_ln11_2_fu_190_p2 = (and_ln11_fu_131_p2 | and_ln11_2_fu_149_p2);

assign or_ln11_3_fu_196_p2 = (and_ln11_3_fu_155_p2 | and_ln11_1_fu_143_p2);

assign or_ln11_4_fu_222_p2 = (and_ln11_5_fu_208_p2 | and_ln11_4_fu_202_p2);

assign or_ln11_5_fu_232_p2 = (or_ln11_3_fu_196_p2 | or_ln11_2_fu_190_p2);

assign or_ln11_6_fu_254_p2 = (or_ln11_5_fu_232_p2 | or_ln11_4_fu_222_p2);

assign or_ln11_fu_301_p2 = (and_ln11_reg_336 | and_ln11_1_reg_341);

assign or_ln34_fu_281_p2 = (icmp_ln34_2_reg_329 | icmp_ln34_1_reg_324);

assign seg_7_code_V_address0 = zext_ln11_fu_185_p1;

assign seg_7_data = ((or_ln11_1_fu_305_p2[0:0] == 1'b1) ? seg_7_code_V_q0 : 8'd192);

assign seg_7_enable = ((or_ln34_fu_281_p2[0:0] == 1'b1) ? select_ln34_fu_274_p3 : select_ln34_1_fu_285_p3);

assign select_ln11_1_fu_169_p3 = ((and_ln11_1_fu_143_p2[0:0] == 1'b1) ? digit2 : digit1);

assign select_ln11_2_fu_177_p3 = ((icmp_ln34_2_fu_125_p2[0:0] == 1'b1) ? select_ln11_fu_161_p3 : select_ln11_1_fu_169_p3);

assign select_ln11_4_fu_214_p3 = ((and_ln11_5_fu_208_p2[0:0] == 1'b1) ? 2'd3 : 2'd2);

assign select_ln11_5_fu_238_p0 = refresh_signal;

assign select_ln11_5_fu_238_p3 = ((select_ln11_5_fu_238_p0[0:0] == 1'b1) ? 2'd3 : 2'd2);

assign select_ln11_6_fu_246_p3 = ((or_ln11_4_fu_222_p2[0:0] == 1'b1) ? select_ln11_4_fu_214_p3 : zext_ln11_1_fu_228_p1);

assign select_ln11_fu_161_p3 = ((and_ln11_3_fu_155_p2[0:0] == 1'b1) ? digit2 : digit1);

assign select_ln34_1_fu_285_p3 = ((icmp_ln34_reg_319[0:0] == 1'b1) ? 4'd7 : 4'd11);

assign select_ln34_fu_274_p3 = ((icmp_ln34_2_reg_329[0:0] == 1'b1) ? 4'd14 : 4'd13);

assign xor_ln11_fu_137_p0 = refresh_signal;

assign xor_ln11_fu_137_p2 = (xor_ln11_fu_137_p0 ^ 1'd1);

assign zext_ln11_1_fu_228_p1 = or_ln11_3_fu_196_p2;

assign zext_ln11_fu_185_p1 = select_ln11_2_fu_177_p3;

endmodule //seg_7_driver
