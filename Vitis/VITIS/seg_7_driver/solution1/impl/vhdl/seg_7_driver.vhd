-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity seg_7_driver is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    refresh_signal : IN STD_LOGIC;
    digit1 : IN STD_LOGIC_VECTOR (3 downto 0);
    digit2 : IN STD_LOGIC_VECTOR (3 downto 0);
    seg_7_data : OUT STD_LOGIC_VECTOR (7 downto 0);
    seg_7_enable : OUT STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of seg_7_driver is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "seg_7_driver_seg_7_driver,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=6.088000,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=17,HLS_SYN_LUT=99,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv8_C0 : STD_LOGIC_VECTOR (7 downto 0) := "11000000";

    signal state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal seg_7_code_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal seg_7_code_V_ce0 : STD_LOGIC;
    signal seg_7_code_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln34_fu_113_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_319 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln34_1_fu_119_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_1_reg_324 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_2_fu_125_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_2_reg_329 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_fu_131_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_reg_336 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_1_fu_143_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_1_reg_341 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln11_fu_185_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal next_state_fu_260_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal and_ln11_fu_131_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln11_fu_137_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln11_fu_137_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_3_fu_155_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_3_fu_155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln11_fu_161_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln11_1_fu_169_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln11_2_fu_177_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln11_2_fu_149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_4_fu_202_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_5_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln11_4_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_3_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_2_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln11_5_fu_238_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_4_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln11_4_fu_214_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln11_1_fu_228_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln11_5_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_6_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln11_6_fu_246_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln11_5_fu_238_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln34_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln34_fu_274_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln34_1_fu_285_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln11_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln11_1_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component seg_7_driver_seg_7_code_V_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    seg_7_code_V_U : component seg_7_driver_seg_7_code_V_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => seg_7_code_V_address0,
        ce0 => seg_7_code_V_ce0,
        q0 => seg_7_code_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln11_1_reg_341 <= and_ln11_1_fu_143_p2;
                and_ln11_reg_336 <= and_ln11_fu_131_p2;
                icmp_ln34_1_reg_324 <= icmp_ln34_1_fu_119_p2;
                icmp_ln34_2_reg_329 <= icmp_ln34_2_fu_125_p2;
                icmp_ln34_reg_319 <= icmp_ln34_fu_113_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                state <= next_state_fu_260_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    and_ln11_1_fu_143_p2 <= (xor_ln11_fu_137_p2 and icmp_ln34_1_fu_119_p2);
    and_ln11_2_fu_149_p2 <= (xor_ln11_fu_137_p2 and icmp_ln34_2_fu_125_p2);
    and_ln11_3_fu_155_p1 <= (0=>refresh_signal, others=>'-');
    and_ln11_3_fu_155_p2 <= (icmp_ln34_2_fu_125_p2 and and_ln11_3_fu_155_p1);
    and_ln11_4_fu_202_p1 <= (0=>refresh_signal, others=>'-');
    and_ln11_4_fu_202_p2 <= (icmp_ln34_1_fu_119_p2 and and_ln11_4_fu_202_p1);
    and_ln11_5_fu_208_p2 <= (xor_ln11_fu_137_p2 and icmp_ln34_fu_113_p2);
    and_ln11_fu_131_p1 <= (0=>refresh_signal, others=>'-');
    and_ln11_fu_131_p2 <= (icmp_ln34_fu_113_p2 and and_ln11_fu_131_p1);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_reset_idle_pp0 <= ap_const_logic_0;
    icmp_ln34_1_fu_119_p2 <= "1" when (state = ap_const_lv2_1) else "0";
    icmp_ln34_2_fu_125_p2 <= "1" when (state = ap_const_lv2_0) else "0";
    icmp_ln34_fu_113_p2 <= "1" when (state = ap_const_lv2_3) else "0";
    next_state_fu_260_p3 <= 
        select_ln11_6_fu_246_p3 when (or_ln11_6_fu_254_p2(0) = '1') else 
        select_ln11_5_fu_238_p3;
    or_ln11_1_fu_305_p2 <= (or_ln11_fu_301_p2 or icmp_ln34_2_reg_329);
    or_ln11_2_fu_190_p2 <= (and_ln11_fu_131_p2 or and_ln11_2_fu_149_p2);
    or_ln11_3_fu_196_p2 <= (and_ln11_3_fu_155_p2 or and_ln11_1_fu_143_p2);
    or_ln11_4_fu_222_p2 <= (and_ln11_5_fu_208_p2 or and_ln11_4_fu_202_p2);
    or_ln11_5_fu_232_p2 <= (or_ln11_3_fu_196_p2 or or_ln11_2_fu_190_p2);
    or_ln11_6_fu_254_p2 <= (or_ln11_5_fu_232_p2 or or_ln11_4_fu_222_p2);
    or_ln11_fu_301_p2 <= (and_ln11_reg_336 or and_ln11_1_reg_341);
    or_ln34_fu_281_p2 <= (icmp_ln34_2_reg_329 or icmp_ln34_1_reg_324);
    seg_7_code_V_address0 <= zext_ln11_fu_185_p1(4 - 1 downto 0);

    seg_7_code_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            seg_7_code_V_ce0 <= ap_const_logic_1;
        else 
            seg_7_code_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    seg_7_data <= 
        seg_7_code_V_q0 when (or_ln11_1_fu_305_p2(0) = '1') else 
        ap_const_lv8_C0;
    seg_7_enable <= 
        select_ln34_fu_274_p3 when (or_ln34_fu_281_p2(0) = '1') else 
        select_ln34_1_fu_285_p3;
    select_ln11_1_fu_169_p3 <= 
        digit2 when (and_ln11_1_fu_143_p2(0) = '1') else 
        digit1;
    select_ln11_2_fu_177_p3 <= 
        select_ln11_fu_161_p3 when (icmp_ln34_2_fu_125_p2(0) = '1') else 
        select_ln11_1_fu_169_p3;
    select_ln11_4_fu_214_p3 <= 
        ap_const_lv2_3 when (and_ln11_5_fu_208_p2(0) = '1') else 
        ap_const_lv2_2;
    select_ln11_5_fu_238_p0 <= (0=>refresh_signal, others=>'-');
    select_ln11_5_fu_238_p3 <= 
        ap_const_lv2_3 when (select_ln11_5_fu_238_p0(0) = '1') else 
        ap_const_lv2_2;
    select_ln11_6_fu_246_p3 <= 
        select_ln11_4_fu_214_p3 when (or_ln11_4_fu_222_p2(0) = '1') else 
        zext_ln11_1_fu_228_p1;
    select_ln11_fu_161_p3 <= 
        digit2 when (and_ln11_3_fu_155_p2(0) = '1') else 
        digit1;
    select_ln34_1_fu_285_p3 <= 
        ap_const_lv4_7 when (icmp_ln34_reg_319(0) = '1') else 
        ap_const_lv4_B;
    select_ln34_fu_274_p3 <= 
        ap_const_lv4_E when (icmp_ln34_2_reg_329(0) = '1') else 
        ap_const_lv4_D;
    xor_ln11_fu_137_p0 <= (0=>refresh_signal, others=>'-');
    xor_ln11_fu_137_p2 <= (xor_ln11_fu_137_p0 xor ap_const_lv1_1);
    zext_ln11_1_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln11_3_fu_196_p2),2));
    zext_ln11_fu_185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln11_2_fu_177_p3),64));
end behav;
